{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { forwardRef } from '@angular/core';\nexport let LibraryService = class LibraryService {\n  constructor(addLibraryComponent) {\n    this.addLibraryComponent = addLibraryComponent;\n    this.apiUrl = 'http://localhost:8080/api/bibliotecas'; // Ajusta la URL de tu backend\n  }\n\n  getAllLibraries() {\n    const url = `${this.apiUrl}/getAll`;\n    return this.http.get(url);\n  }\n  createLibrary(library) {\n    const url = `${this.apiUrl}/create`;\n    return this.http.post(url, library);\n  }\n};\nLibraryService = __decorate([Injectable({\n  providedIn: 'root'\n}), __param(0, Inject(forwardRef(() => AddLibraryComponent)))], LibraryService);","map":{"version":3,"names":["Injectable","forwardRef","LibraryService","constructor","addLibraryComponent","apiUrl","getAllLibraries","url","http","get","createLibrary","library","post","__decorate","providedIn","__param","Inject","AddLibraryComponent"],"sources":["C:\\Users\\LykerX\\Desktop\\Desarrollo Web\\Parcial\\front\\src\\app\\services\\library.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Library } from '../types/library';\r\n\r\nimport { forwardRef } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LibraryService {\r\n  private apiUrl = 'http://localhost:8080/api/bibliotecas'; // Ajusta la URL de tu backend\r\n\r\n  constructor(@Inject(forwardRef(() => AddLibraryComponent)) private addLibraryComponent: AddLibraryComponent) {}\r\n\r\n  getAllLibraries(): Observable<Library[]> {\r\n    const url = `${this.apiUrl}/getAll`;\r\n    return this.http.get<Library[]>(url);\r\n  }\r\n\r\n  createLibrary(library: Library): Observable<Library> {\r\n    const url = `${this.apiUrl}/create`;\r\n    return this.http.post<Library>(url, library);\r\n  }\r\n\r\n  // Agrega más métodos según sea necesario, como getLibraryById, updateLibrary, deleteLibrary, etc.\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAK1C,SAASC,UAAU,QAAQ,eAAe;AAKnC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAGzBC,YAA2DC,mBAAgD;IAAxC,KAAAA,mBAAmB,GAAnBA,mBAAmB;IAF9E,KAAAC,MAAM,GAAG,uCAAuC,CAAC,CAAC;EAEoD;;EAE9GC,eAAeA,CAAA;IACb,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,SAAS;IACnC,OAAO,IAAI,CAACG,IAAI,CAACC,GAAG,CAAYF,GAAG,CAAC;EACtC;EAEAG,aAAaA,CAACC,OAAgB;IAC5B,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,SAAS;IACnC,OAAO,IAAI,CAACG,IAAI,CAACI,IAAI,CAAUL,GAAG,EAAEI,OAAO,CAAC;EAC9C;CAGD;AAhBYT,cAAc,GAAAW,UAAA,EAH1Bb,UAAU,CAAC;EACVc,UAAU,EAAE;CACb,CAAC,EAIaC,OAAA,IAAAC,MAAM,CAACf,UAAU,CAAC,MAAMgB,mBAAmB,CAAC,CAAC,E,EAH/Cf,cAAc,CAgB1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}